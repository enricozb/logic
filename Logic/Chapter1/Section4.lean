import Mathlib.Data.Set.Finite
import ¬´Logic¬ª.Chapter1.Section1

namespace Chapter1
namespace Section4

open Chapter1.Section1 (Signature Interpretation Signature.Formula)
open Chapter1.Section1.Notation

inductive Unary | not
inductive Binary | and

/-- The boolean signature `{¬¨, ‚àß}`. -/
def ùì¢ : Signature := Signature.mk
  (fun | 1 => Unary | 2 => Binary | _ => Empty)

instance : Interpretation ùì¢ where
  fns := fun {a} => match a with
    | 1 => fun .not b => Bool.not (b 0)
    | 2 => fun .and b => Bool.and (b 0) (b 1)
    | 0 | _+3 => fun _ => by contradiction

instance : Tilde (ùì¢.Formula n) := ‚ü®fun œÜ => .app 1 .not ![œÜ]‚ü©
instance : Wedge (ùì¢.Formula n) := ‚ü®fun œÜ‚ÇÅ œÜ‚ÇÇ => .app 2 .and ![œÜ‚ÇÅ, œÜ‚ÇÇ]‚ü©
instance : Vee (ùì¢.Formula n)   := ‚ü®fun œÜ‚ÇÅ œÜ‚ÇÇ => ~(~œÜ‚ÇÅ ‚ãè ~œÜ‚ÇÇ)‚ü©
instance : Bot (ùì¢.Formula (n + 1)) := ‚ü®(.var 0) ‚ãè ~(.var 0)‚ü©
instance : Top (ùì¢.Formula (n + 1)) := ‚ü®~‚ä•‚ü©

namespace Calculus

set_option hygiene false
scoped[Chapter1.Section4.Calculus] infix:27 " ‚ä¢ " => Gentzen

/--
  Gentzen Sequents are a relation from sets of formulas to formulas with
  specific construction rules.
-/
inductive Gentzen : Set (ùì¢.Formula n) ‚Üí (ùì¢.Formula n) ‚Üí Prop
  /-- (IS) Initial sequent. -/
  | init : {Œ±} ‚ä¢ Œ±
  /-- (MR) Monotonicity -/
  | mono (hŒ± : X ‚ä¢ Œ±) (hX : X ‚äÜ X') : X' ‚ä¢ Œ±
  /-- (‚àß1) And introduction. -/
  | and‚ÇÅ (hŒ± : X ‚ä¢ Œ±) (hŒ≤ : X ‚ä¢ Œ≤) : X ‚ä¢ (Œ± ‚ãè Œ≤)
  /-- (‚àß2 left) And elimination into left. -/
  | and‚ÇÇ_left  (hŒ± : X ‚ä¢ Œ± ‚ãè Œ≤) : X ‚ä¢ Œ±
  /-- (‚àß2 left) And elimination into right. -/
  | and‚ÇÇ_right (hŒ± : X ‚ä¢ Œ± ‚ãè Œ≤) : X ‚ä¢ Œ≤
  /-- (¬¨1) -/
  | not‚ÇÅ (h‚ÇÅ : X ‚ä¢ Œ±) (h‚ÇÇ : X ‚ä¢ ~Œ±) Œ≤ : X ‚ä¢ Œ≤
  /-- (¬¨2) -/
  | not‚ÇÇ (h‚ÇÅ : X ‚à™ {Œ±} ‚ä¢ Œ≤) (h‚ÇÇ : X ‚à™ {~Œ±} ‚ä¢ Œ≤) : X ‚ä¢ Œ≤

end Calculus

open Calculus

/- Examples of derivable rules. -/
example : {Œ±, Œ≤} ‚ä¢ Œ± ‚ãè Œ≤ := by
  apply Gentzen.and‚ÇÅ
  case' hŒ± => apply Gentzen.mono Gentzen.init
  case' hŒ≤ => apply Gentzen.mono Gentzen.init

  all_goals
    simp only [Set.mem_singleton_iff, Set.singleton_subset_iff, Set.mem_insert_iff, true_or, or_true]

lemma true_intro : (‚àÖ : Set (ùì¢.Formula (n + 1))) ‚ä¢ ‚ä§ := by sorry

lemma not_elim (h : X ‚à™ {~Œ±} ‚ä¢ Œ±) : X ‚ä¢ Œ± := by
  have h‚ÇÅ : X ‚à™ {Œ±} ‚ä¢ Œ±
  ¬∑ have hsub: {Œ±} ‚äÜ X ‚à™ {Œ±} := Set.subset_union_right X {Œ±}
    apply Gentzen.mono Gentzen.init hsub
  exact Gentzen.not‚ÇÇ h‚ÇÅ h

lemma absurdum (hp : X ‚à™ {~Œ±} ‚ä¢ Œ≤) (hn : X ‚à™ {~Œ±} ‚ä¢ ~Œ≤) : X ‚ä¢ Œ± := by
  have : X ‚à™ {~Œ±} ‚ä¢ Œ± := Gentzen.not‚ÇÅ hp hn Œ±
  exact not_elim this

lemma arrow_elim (h : X ‚ä¢ Œ± ‚ü∂ Œ≤) : X ‚à™ {Œ±} ‚ä¢ Œ≤ := sorry

lemma cut (h‚ÇÅ : X ‚ä¢ Œ±) (h‚ÇÇ : X ‚à™ {Œ±} ‚ä¢ Œ≤): X ‚ä¢ Œ≤ := sorry

lemma arrow_intro (h : X ‚à™ {Œ±} ‚ä¢ Œ≤) : X ‚ä¢ Œ± ‚ü∂ Œ≤ := sorry

lemma detachment (h‚ÇÅ : X ‚ä¢ Œ±) (h‚ÇÇ : X ‚ä¢ Œ± ‚ü∂ Œ≤) : X ‚ä¢ Œ≤ :=
  cut h‚ÇÅ (arrow_elim h‚ÇÇ)

/--
  Relations that are "closed under Gentzen rules" are relations that relate
  a set of formulas `X` and a formula `Œ±` when the premises are satisfied
  under the relation for some Gentzen rule.

  For example, if some Gentzen rule is of the form "if `X‚ÇÅ ‚ä¢ Œ±‚ÇÅ, .., X‚Çô ‚ä¢ Œ±‚Çô`,
  then `X ‚ä¢ Œ±`", then `r` is closed under Gentzen rules if
  `r X‚ÇÅ Œ±‚ÇÅ ‚àß .. ‚àß r X‚Çô Œ±‚Çô ‚Üí r X Œ±`.

  The fields of this class are simply the inductive constructures of `Gentzen`.
-/
class GentzenClosedRel (r : (Set (ùì¢.Formula n)) ‚Üí ùì¢.Formula n ‚Üí Prop) where
  init : r {Œ±} Œ±
  mono : r X Œ± ‚Üí X ‚äÜ X' ‚Üí r X' Œ±
  and‚ÇÅ : r X Œ± ‚Üí r X Œ≤ ‚Üí r X (Œ± ‚ãè Œ≤)
  and‚ÇÇ_left : r X (Œ± ‚ãè Œ≤) ‚Üí r X Œ±
  and‚ÇÇ_right : r X (Œ± ‚ãè Œ≤) ‚Üí r X Œ≤
  not‚ÇÅ : r X Œ± ‚Üí r X (~Œ±) ‚Üí r X Œ≤
  not‚ÇÇ : r (X ‚à™ {Œ±}) Œ≤ ‚Üí r (X ‚à™ {~Œ±}) Œ≤ ‚Üí r X Œ≤

/--
  A Gentzen closed relation is implied by the Gentzen derivability relation.
-/
theorem principle_of_rule_induction (G : GentzenClosedRel r) : X ‚ä¢ Œ± ‚Üí r X Œ± := by
  intro h
  induction h
  case init => exact G.init
  case mono hX hXŒ± => exact G.mono hXŒ± hX
  case and‚ÇÅ hŒ± hŒ≤ => exact G.and‚ÇÅ hŒ± hŒ≤
  case and‚ÇÇ_left hŒ±Œ≤ => exact G.and‚ÇÇ_left hŒ±Œ≤
  case and‚ÇÇ_right hŒ±Œ≤ => exact G.and‚ÇÇ_right hŒ±Œ≤
  case not‚ÇÅ hp hn => exact G.not‚ÇÅ hp hn
  case not‚ÇÇ hp hn => exact G.not‚ÇÇ hp hn

/-

-- TODO: define X ‚ä® Œ± again without a typeclass, using the model satisfiability
-- definition. Then state a gentzen closed relation instance for `‚ä®`.

/-- The logical consequence relation `X ‚ä® Œ±` is closed under Gentzen rules. -/
instance [s : Satisfies (Set (ùì¢.Formula n)) (ùì¢.Formula n)] : GentzenClosedRel s.satisfies where
  init := by
    intro Œ±
    simp [Satisfies.satisfies] -- r {Œ±} Œ±
  mono := sorry -- r X Œ± ‚Üí X ‚äÜ X' ‚Üí r X' Œ±
  and‚ÇÅ := sorry -- r X Œ± ‚Üí r X Œ≤ ‚Üí r X (Œ± ‚ãè Œ≤)
  and‚ÇÇ_left := sorry -- r X (Œ± ‚ãè Œ≤) ‚Üí r X Œ±
  and‚ÇÇ_right := sorry -- r X (Œ± ‚ãè Œ≤) ‚Üí r X Œ≤
  not‚ÇÅ := sorry -- r X Œ± ‚Üí r X (~Œ±) ‚Üí r X Œ≤
  not‚ÇÇ := sorry -- r (X ‚à™ {Œ±}) Œ≤ ‚Üí r (X ‚à™ {~Œ±}) Œ≤ ‚Üí r X Œ≤
-/

/--
  Theorem 4.1: If `X ‚ä¢ Œ±`, then there is a finite subset `X‚ÇÄ ‚äÜ X` such that
  `X‚ÇÄ ‚ä¢ Œ±`.
-/
theorem finiteness {n : ‚Ñï} {X : Set (ùì¢.Formula n)} {Œ± : ùì¢.Formula n}
  (h : X ‚ä¢ Œ±) : ‚àÉ X‚ÇÄ, X‚ÇÄ.Finite ‚àß (X‚ÇÄ ‚äÜ X) ‚àß (X‚ÇÄ ‚ä¢ Œ±) := by

  let ùìî (X : Set (ùì¢.Formula n)) Œ± := ‚àÉ X‚ÇÄ, X‚ÇÄ.Finite ‚àß (X‚ÇÄ ‚äÜ X) ‚àß (X‚ÇÄ ‚ä¢ Œ±)
  suffices : GentzenClosedRel ùìî
  ¬∑ exact principle_of_rule_induction this h

  constructor
  case init =>
    intro Œ±
    exact ‚ü®{Œ±}, Set.finite_singleton Œ±, Set.singleton_subset_singleton.mpr rfl, .init‚ü©

  case mono =>
    intro X Œ± X' ‚ü®X‚ÇÄ, hX‚ÇÄfin, hX‚ÇÄsub, hX‚ÇÄŒ±‚ü© hX
    exact ‚ü®X‚ÇÄ, hX‚ÇÄfin, Set.Subset.trans hX‚ÇÄsub hX, hX‚ÇÄŒ±‚ü©

  case and‚ÇÅ =>
    intro X Œ± Œ≤ ‚ü®X‚ÇÄ, hX‚ÇÄfin, hX‚ÇÄsub, hX‚ÇÄŒ±‚ü© ‚ü®X‚ÇÅ, hX‚ÇÅfin, hX‚ÇÅsub, hX‚ÇÅŒ≤‚ü©
    exact ‚ü®
      (X‚ÇÄ ‚à™ X‚ÇÅ),
      (Set.Finite.union hX‚ÇÄfin hX‚ÇÅfin),
      Set.union_subset hX‚ÇÄsub hX‚ÇÅsub,
      Gentzen.and‚ÇÅ
        (Gentzen.mono hX‚ÇÄŒ± (Set.subset_union_left X‚ÇÄ X‚ÇÅ))
        (Gentzen.mono hX‚ÇÅŒ≤ (Set.subset_union_right X‚ÇÄ X‚ÇÅ))
    ‚ü©

  sorry
  sorry
  sorry
  sorry

end Section4
end Chapter1
