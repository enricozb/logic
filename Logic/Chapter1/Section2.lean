import Mathlib.Data.FinEnum
import ¬´MathlibExt¬ª.Fin
import ¬´Logic¬ª.Chapter1.Notation
import ¬´Logic¬ª.Chapter1.Section1

open Chapter1.Section1 Notation

namespace Chapter1
namespace Section2

instance : FinEnum Bool := FinEnum.ofList [false, true] (fun b => by
  simp_rw [List.mem_cons, List.not_mem_nil, or_false, Bool.dichotomy])

/- Definition and statements about semantic equivalence of formulas. -/
section SemanticEquivalence

variable {V : Type _} {S : Signature} [Interpretation S]

/--
  Semantic Equivalence: Two formulas (of possibly different signatures) are semantically equivalent
  if they have the same valuation for all models.
-/
abbrev semeq (Œ± Œ≤ : S.Formula V) :=
  ‚àÄ w : Model V, w.value Œ± = w.value Œ≤

scoped infix:67 " ‚â° " => semeq

/-- `‚â°` is an equivalence relation when comparing formulas of the same signature. -/
instance : Equivalence (@semeq V S _) where
  refl := by simp only [semeq, implies_true]
  symm := by intro œÜ‚ÇÅ œÜ‚ÇÇ h w; exact (h w).symm
  trans := by intro œÜ‚ÇÅ œÜ‚ÇÇ œÜ‚ÇÉ h‚ÇÅ h‚ÇÇ w; rw [h‚ÇÅ w, h‚ÇÇ w]

theorem semeq_refl {Œ± : S.Formula V} : Œ± ‚â° Œ± := instEquivalenceFormulaSemeq.refl Œ±
theorem semeq_symm {Œ± Œ≤ : S.Formula V} : Œ± ‚â° Œ≤ ‚Üí Œ≤ ‚â° Œ± := instEquivalenceFormulaSemeq.symm
theorem semeq_trans {Œ± Œ≤ œá: S.Formula V} : Œ± ‚â° Œ≤ ‚Üí Œ≤ ‚â° œá ‚Üí Œ± ‚â° œá :=
  instEquivalenceFormulaSemeq.trans

/-- `‚â°` is a _congruence relation_ in `B`. -/
theorem semeq_congr {Œ± Œ±' Œ≤ Œ≤' : B.Formula V} (hŒ± : Œ± ‚â° Œ±') (hŒ≤ : Œ≤ ‚â° Œ≤') :
    (Œ± ‚ãè Œ≤ ‚â° Œ±' ‚ãè Œ≤') ‚àß (Œ± ‚ãé Œ≤ ‚â° Œ±' ‚ãé Œ≤') ‚àß (~Œ± ‚â° ~Œ±') := by
  refine' ‚ü®_, _, _‚ü©
  all_goals simp only [semeq, Model.value, Interpretation.fns, hŒ±, hŒ≤,
    Matrix.cons_val_zero, Matrix.cons_val_one, Matrix.head_cons, implies_true]

/-- Example semantic equivalences for arbitrary propositional variables `V`. -/
example (Œ± Œ≤ : B.Formula V) :
  Œ± ‚â° ~~Œ± ‚àß
  Œ± ‚ãè Œ≤ ‚â° Œ≤ ‚ãè Œ± ‚àß
  Œ± ‚ãé Œ≤ ‚â° Œ≤ ‚ãé Œ± ‚àß
  Œ± ‚ãè Œ± ‚â° Œ± ‚àß
  Œ± ‚ãé Œ± ‚â° Œ± ‚àß
  ~(Œ± ‚ãè Œ≤) ‚â° ~Œ± ‚ãé ~Œ≤ ‚àß
  ~(Œ± ‚ãé Œ≤) ‚â° ~Œ± ‚ãè ~Œ≤
  := by
  simp only [semeq, Model.value, Interpretation.fns,
    Matrix.cons_val_fin_one, Matrix.cons_val_zero, Matrix.cons_val_one, Matrix.head_cons,
    Bool.not_not, Bool.not_and, Bool.not_or, Bool.and_comm, Bool.and_self, Bool.or_comm, Bool.or_self,
    implies_true, and_self]

/-- Example semantic equivalences for inhabited propositional variables `V`. -/
example [Inhabited V] (Œ± : B.Formula V) :
  Œ± ‚ãé ~Œ± ‚â° ‚ä§ ‚àß
  Œ± ‚ãè ~Œ± ‚â° ‚ä• ‚àß
  Œ± ‚ãè ‚ä§  ‚â° Œ± ‚àß
  Œ± ‚ãé ‚ä•  ‚â° Œ±
  := by simp only [semeq, Model.value, Interpretation.fns,
    Matrix.cons_val_zero, Matrix.cons_val_fin_one,
    Bool.or_not_self, Bool.and_true, Bool.or_false, Bool.and_not_self,
    implies_true, and_self]

variable [DecidableEq (S.Formula V)]

/-- Substitutes instances of `Œ±` with `Œ≤` in `œÜ`. -/
def subst (œÜ Œ± Œ≤ : S.Formula V) : S.Formula V :=
  if œÜ = Œ± then
    Œ≤
  else
    match œÜ with
    | .var p => .var p
    | .app a s œÜs => .app a s (fun i => subst (œÜs i) Œ± Œ≤)

/-- Notation for substitution. `œÜ[Œ± ‚Ü¶ Œ≤]` substitutes `Œ±` with `Œ≤` in `œÜ`. -/
scoped notation œÜ:max "[" Œ± "‚Ü¶" Œ≤ "]" => subst œÜ Œ± Œ≤

@[simp] theorem subst_self (Œ± Œ≤ : S.Formula V) : Œ±[Œ± ‚Ü¶ Œ≤] = Œ≤ := by
  unfold subst
  simp only [ite_true]

/--
  Substituting semantically equivalent formulas `Œ± Œ≤` within a formula `œÜ`
  produces an equivalent formula.
-/
theorem semeq_of_susbst_semeq (Œ± Œ≤ œÜ : S.Formula V) (h : Œ± ‚â° Œ≤) : œÜ[Œ± ‚Ü¶ Œ≤] ‚â° œÜ := by
  induction' œÜ with p a s œÜs œÜs_ih
  ¬∑ by_cases hp : .var p = Œ±
    ¬∑ rw [subst, if_pos hp, hp]; exact semeq_symm h
    ¬∑ rw [subst, if_neg hp]; exact semeq_refl

  ¬∑ by_cases hœÜs : .app a s œÜs = Œ±
    ¬∑ rw [hœÜs, subst_self]; exact semeq_symm h
    ¬∑ intro w
      simp only [subst, if_neg hœÜs, semeq, Model.value, Interpretation.fns, ‚ÜêœÜs_ih _ w]

end SemanticEquivalence

section NormalForm

/-- The list of inputs that satisfy `f : ùîπ n`. -/
def satisfying_inputs (f : ùîπ n) : List [Bool; n] := (FinEnum.pi.enum (fun _ => Bool)).filter f

theorem mem_satisfying_inputs_iff (f : ùîπ n) : b ‚àà satisfying_inputs f ‚Üî f b = true := by
  simp only [satisfying_inputs, List.mem_filter, FinEnum.pi.mem_enum, true_and, imp_self]

theorem not_mem_satisfying_inputs_iff (f : ùîπ n) : b ‚àâ satisfying_inputs f ‚Üî f b = false := by
  simp only [mem_satisfying_inputs_iff f, Bool.not_eq_true]

/-- A function `f : ùîπ n` having no satisfying inputs implies it is false for all inputs. -/
theorem satisfying_inputs_empty_iff (f : ùîπ n) : satisfying_inputs f = [] ‚Üî ‚àÄ b, f b = false := by
  apply Iff.intro
  ¬∑ intro h b
    simp only [‚Üê not_mem_satisfying_inputs_iff, h, List.not_mem_nil, not_false_eq_true]
  ¬∑ intro hf
    simp only [satisfying_inputs, List.filter_eq_nil, hf _, not_false_eq_true, implies_true]

theorem bigand_value (œÜs : [B.Formula V; n + 1]) (w : Model V) :
    w.value (‚ãÄ œÜs) = true ‚Üî ‚àÄ i, w.value (œÜs i) = true := by
  match n with
  | 0 => simp only [BigWedge.bigwedge, foldop, Fin.forall_fin_one]
  | n + 1 =>
    have bigand_succ {n : ‚Ñï} (œÜs : [B.Formula V; n + 1 + 1]) :
      ‚ãÄ œÜs = (‚ãÄ Fin.init œÜs) ‚ãè (œÜs (Fin.last (n + 1))) := by rfl
    rw [bigand_succ œÜs]
    simp only [Model.value, Interpretation.fns, bigand_value (Fin.init œÜs) w, Bool.and_eq_true,
      Matrix.cons_val_zero, Matrix.cons_val_one, Matrix.head_cons, Fin.init, Fin.forall_fin_succ']

theorem bigor_value (œÜs : [B.Formula V; n + 1]) (w : Model V) :
    w.value (‚ãÅ œÜs) = true ‚Üî ‚àÉ i, w.value (œÜs i) = true := by
  match n with
  | 0 => simp [BigVee.bigvee, foldop, (@Fin.exists_fin_one fun i => w.value (œÜs i)).symm]
  | n + 1 =>
    have bigor_succ {n : ‚Ñï} (œÜs : [B.Formula V; n + 1 + 1]) :
      ‚ãÅ œÜs = (‚ãÅ Fin.init œÜs) ‚ãé (œÜs (Fin.last (n + 1))) := by rfl
    rw [bigor_succ œÜs]
    simp only [Model.value, Interpretation.fns, bigor_value (Fin.init œÜs) w, Bool.or_eq_true,
      Matrix.cons_val_zero, Matrix.cons_val_one, Matrix.head_cons, Fin.init, Fin.exists_fin_succ']

def dnf_entry (b : [Bool; n + 1]) : B.Formula (Fin (n + 1)) :=
  (‚ãÄ fun i => if b i then .var i else ~(.var i))

/--
  Disjunctive normal form. The DNF of a boolean function `f : ùîπ n` is defined only for `n > 0`.
-/
def dnf (f : ùîπ (n + 1)) : B.Formula (Fin (n + 1)) :=
  let rec dnf' (inputs : List [Bool; n + 1]) :=
    match inputs with
    | [] => ‚ä•
    | b::bs => (dnf_entry b) ‚ãé (dnf' bs)

  dnf' (satisfying_inputs f)

theorem model_value_bot {w : Model _} : w.value (‚ä• : B.Formula (Fin (n + 1))) = false := by
  simp only [Model.value, Interpretation.fns, Bool.and_not_self]

theorem model_value_cnf_entry (w : Model _) (b : [Bool; n + 1]) (i : Fin (n + 1)) :
    w.value (if b i = true then (.var i : B.Formula _) else ~(.var i)) = true ‚Üî w.valuation i = b i := by
  by_cases h : b i = true
  ¬∑ simp only [h, if_pos h, Model.value]
  ¬∑ simp only [h, if_neg h, Model.value, Interpretation.fns, Bool.not_eq_true']

theorem model_value_dnf_entry_eq_true_iff_eq (w : Model _) (b : [Bool; n + 1]) :
    w.value (dnf_entry b) = true ‚Üî w.valuation = b := by
  simp only [dnf_entry, bigand_value, model_value_cnf_entry]
  exact ‚ü®funext, congrFun‚ü©

theorem model_value_dnf_eq_true_iff_mem (w : Model _) (bs : List [Bool; n + 1]) :
    w.value (dnf.dnf' bs) = true ‚Üî w.valuation ‚àà bs := by
  match bs with
  | [] => simp only [List.not_mem_nil, iff_false, Bool.not_eq_true, dnf.dnf', model_value_bot]
  | b::bs =>
    simp only [Model.value, Interpretation.fns, Matrix.cons_val_zero, Matrix.cons_val_one, Matrix.head_cons,
      Bool.or_eq_true, List.mem_cons]

    refine' ‚ü®
      fun h => h.elim
        (fun hw => Or.inl ((model_value_dnf_entry_eq_true_iff_eq w b).mp hw))
        (fun hw => Or.inr ((model_value_dnf_eq_true_iff_mem w bs).mp hw)),
      fun h => h.elim
        (fun hw => Or.inl ((model_value_dnf_entry_eq_true_iff_eq w b).mpr hw))
        (fun hw => Or.inr ((model_value_dnf_eq_true_iff_mem w bs).mpr hw))
      ‚ü©

theorem model_value_dnf_entry_self_eq_true {w : Model (Fin (n + 1))} :
    w.value (dnf_entry w.valuation) = true :=
  (model_value_dnf_entry_eq_true_iff_eq w w.valuation).mpr rfl

/-- Theorem 2.1: Every boolean function of at least one variable is represented by its DNF. -/
theorem dnf_represents (f : ùîπ (n + 1)) : (dnf f).represents f := by
  intro w

  match h : satisfying_inputs f with
  | [] => simp only [h, dnf, dnf.dnf', model_value_bot, (satisfying_inputs_empty_iff f).mp h]
  | b::bs =>
    simp only [h, dnf, dnf.dnf', Model.value, Interpretation.fns,
      Matrix.cons_val_zero, Matrix.cons_val_one, Matrix.head_cons]

    by_cases hw : w.valuation ‚àà satisfying_inputs f
    ¬∑ rw [(mem_satisfying_inputs_iff f).mp hw]
      apply Or.elim (List.mem_cons.mp (h ‚ñ∏ hw))
      ¬∑ intro hwb; simp_rw [‚Üê hwb, model_value_dnf_entry_self_eq_true, Bool.true_or]
      ¬∑ intro hwbs; simp_rw [(model_value_dnf_eq_true_iff_mem w bs).mpr hwbs, Bool.or_true]

    ¬∑ rw [(not_mem_satisfying_inputs_iff f).mp hw, Bool.or_eq_false_iff]
      rw [h, List.mem_cons.not, not_or] at hw
      have left := (model_value_dnf_entry_eq_true_iff_eq w b).not.mpr hw.left
      have right := (model_value_dnf_eq_true_iff_mem w bs).not.mpr hw.right
      rw [Bool.not_eq_true] at left right

      exact ‚ü®left, right‚ü©

end NormalForm

end Section2
end Chapter1
