import Mathlib.Data.FinEnum
import ¬´MathlibExt¬ª.Bool
import ¬´MathlibExt¬ª.Fin
import ¬´Logic¬ª.Chapter1.Notation
import ¬´Logic¬ª.Chapter1.Section1

open Notation

instance : FinEnum Bool := FinEnum.ofList [false, true] (fun b => by
  simp_rw [List.mem_cons, List.not_mem_nil, or_false, Bool.dichotomy])

/- Definition and statements about semantic equivalence of formulas. -/
section SemanticEquivalence

variable {S‚ÇÅ S‚ÇÇ : Signature} [Interpretation S‚ÇÅ] [Interpretation S‚ÇÇ]

/--
  Heterogeneous Semantic Equivalence: Two formulas (of possibly different signatures) are
  semantically equivalent if they have the same valuation for all models.
-/
def semeq' (Œ± : S‚ÇÅ.Formula V) (Œ≤ : S‚ÇÇ.Formula V) :=
  ‚àÄ w : Model V, w.value Œ± = w.value Œ≤

scoped[Notation] infix:67 " ‚â°' " => semeq'

@[simp] theorem semeq'_represents {Œ± : S‚ÇÅ.Formula (Fin n)} {Œ≤ : S‚ÇÇ.Formula (Fin n)} {f : ùîπ n}
    (hs : Œ± ‚â°' Œ≤) (hr : Œ±.represents f) : Œ≤.represents f := by
  intro w
  rw [‚Üê hr w, hs w]

variable {V : Type _} {S : Signature} [Interpretation S]

/--
  Homogenous Semantic Equivalence: Two formulas of the same signature are semantically equivalent
  if they have the same valuation for all models.
-/
def semeq (Œ± Œ≤ : S.Formula V) := semeq' Œ± Œ≤

scoped[Notation] infix:67 " ‚â° " => semeq

@[simp] theorem semeq_def {Œ± Œ≤ : S.Formula V} : Œ± ‚â° Œ≤ ‚Üî ‚àÄ w : Model V, w.value Œ± = w.value Œ≤ := by
  rfl

/-- `‚â°` is an equivalence relation when comparing formulas of the same signature. -/
instance : Equivalence (@semeq V S _) where
  refl := by simp only [semeq, semeq', implies_true]
  symm := by intro œÜ‚ÇÅ œÜ‚ÇÇ h w; exact (h w).symm
  trans := by intro œÜ‚ÇÅ œÜ‚ÇÇ œÜ‚ÇÉ h‚ÇÅ h‚ÇÇ w; rw [h‚ÇÅ w, h‚ÇÇ w]

theorem semeq_refl {Œ± : S.Formula V} : Œ± ‚â° Œ± := instEquivalenceFormulaSemeq.refl Œ±
theorem semeq_symm {Œ± Œ≤ : S.Formula V} : Œ± ‚â° Œ≤ ‚Üí Œ≤ ‚â° Œ± := instEquivalenceFormulaSemeq.symm
theorem semeq_trans {Œ± Œ≤ œá: S.Formula V} : Œ± ‚â° Œ≤ ‚Üí Œ≤ ‚â° œá ‚Üí Œ± ‚â° œá :=
  instEquivalenceFormulaSemeq.trans

/-- `‚â°` is a _congruence relation_ in `B`. -/
theorem semeq_congr {Œ± Œ±' Œ≤ Œ≤' : B.Formula V} (hŒ± : Œ± ‚â° Œ±') (hŒ≤ : Œ≤ ‚â° Œ≤') :
    (Œ± ‚ãè Œ≤ ‚â° Œ±' ‚ãè Œ≤') ‚àß (Œ± ‚ãé Œ≤ ‚â° Œ±' ‚ãé Œ≤') ‚àß (~Œ± ‚â° ~Œ±') := by
  simp only [semeq_def, hŒ± _, hŒ≤ _, Model.value_and, Model.value_or, Model.value_not,
    implies_true, and_self]

/-- Example semantic equivalences for arbitrary propositional variables `V`. -/
example (Œ± Œ≤ : B.Formula V) :
  Œ± ‚â° ~~Œ± ‚àß
  Œ± ‚ãè Œ≤ ‚â° Œ≤ ‚ãè Œ± ‚àß
  Œ± ‚ãé Œ≤ ‚â° Œ≤ ‚ãé Œ± ‚àß
  Œ± ‚ãè Œ± ‚â° Œ± ‚àß
  Œ± ‚ãé Œ± ‚â° Œ± ‚àß
  ~(Œ± ‚ãè Œ≤) ‚â° ~Œ± ‚ãé ~Œ≤ ‚àß
  ~(Œ± ‚ãé Œ≤) ‚â° ~Œ± ‚ãè ~Œ≤
  := by
  simp only [semeq_def, Model.value_and, Model.value_or, Model.value_not, Bool.not_not,
    Bool.not_and, Bool.not_or, Bool.and_comm, Bool.and_self, Bool.or_comm, Bool.or_self,
    implies_true, and_self]

/-- Example semantic equivalences for inhabited propositional variables `V`. -/
example [Inhabited V] (Œ± : B.Formula V) :
  Œ± ‚ãé ~Œ± ‚â° ‚ä§ ‚àß
  Œ± ‚ãè ~Œ± ‚â° ‚ä• ‚àß
  Œ± ‚ãè ‚ä§  ‚â° Œ± ‚àß
  Œ± ‚ãé ‚ä•  ‚â° Œ±
  := by
  simp only [semeq_def, Model.value_and, Model.value_or, Model.value_not, Model.value_top,
    Model.value_bot, Bool.or_not_self, Bool.and_true, Bool.or_false, Bool.and_not_self,
    implies_true, and_self]

variable [DecidableEq (S.Formula V)]

/-- Substitutes instances of `Œ±` with `Œ≤` in `œÜ`. -/
def subst (œÜ Œ± Œ≤ : S.Formula V) : S.Formula V :=
  if œÜ = Œ± then
    Œ≤
  else
    match œÜ with
    | .var p => .var p
    | .app a s œÜs => .app a s (fun i => subst (œÜs i) Œ± Œ≤)

/-- Notation for substitution. `œÜ[Œ± ‚Ü¶ Œ≤]` substitutes `Œ±` with `Œ≤` in `œÜ`. -/
scoped[Notation] notation œÜ:max "[" Œ± "‚Ü¶" Œ≤ "]" => subst œÜ Œ± Œ≤

@[simp] theorem subst_self (Œ± Œ≤ : S.Formula V) : Œ±[Œ± ‚Ü¶ Œ≤] = Œ≤ := by
  unfold subst
  simp only [ite_true]

/--
  Substituting semantically equivalent formulas `Œ± Œ≤` within a formula `œÜ`
  produces an equivalent formula.
-/
theorem semeq_of_susbst_semeq (Œ± Œ≤ œÜ : S.Formula V) (h : Œ± ‚â° Œ≤) : œÜ[Œ± ‚Ü¶ Œ≤] ‚â° œÜ := by
  induction' œÜ with p a s œÜs œÜs_ih
  ¬∑ by_cases hp : .var p = Œ±
    ¬∑ rw [subst, if_pos hp, hp]; exact semeq_symm h
    ¬∑ rw [subst, if_neg hp]; exact semeq_refl

  ¬∑ by_cases hœÜs : .app a s œÜs = Œ±
    ¬∑ rw [hœÜs, subst_self]; exact semeq_symm h
    ¬∑ intro w
      simp only [subst, if_neg hœÜs, semeq, Model.value, Interpretation.fns, ‚ÜêœÜs_ih _ w]

end SemanticEquivalence

section NormalForm

/-- The list of inputs that satisfy `f : ùîπ n`. -/
def satisfying_inputs (f : ùîπ n) : List [Bool; n] := (FinEnum.pi.enum (fun _ => Bool)).filter f

theorem mem_satisfying_inputs_iff (f : ùîπ n) : b ‚àà satisfying_inputs f ‚Üî f b = true := by
  simp only [satisfying_inputs, List.mem_filter, FinEnum.pi.mem_enum, true_and, imp_self]

theorem not_mem_satisfying_inputs_iff (f : ùîπ n) : b ‚àâ satisfying_inputs f ‚Üî f b = false := by
  simp only [mem_satisfying_inputs_iff f, Bool.not_eq_true]

/-- A function `f : ùîπ n` having no satisfying inputs implies it is false for all inputs. -/
theorem satisfying_inputs_empty_iff (f : ùîπ n) : satisfying_inputs f = [] ‚Üî ‚àÄ b, f b = false := by
  apply Iff.intro
  ¬∑ intro h b
    simp only [‚Üê not_mem_satisfying_inputs_iff, h, List.not_mem_nil, not_false_eq_true]
  ¬∑ intro hf
    simp only [satisfying_inputs, List.filter_eq_nil, hf _, not_false_eq_true, implies_true]

theorem bigand_value (œÜs : [B.Formula V; n + 1]) (w : Model V) :
    w.value (‚ãÄ œÜs) = true ‚Üî ‚àÄ i, w.value (œÜs i) = true := by
  match n with
  | 0 => simp only [BigWedge.bigwedge, foldop, Fin.forall_fin_one]
  | n + 1 =>
    have bigand_succ {n : ‚Ñï} (œÜs : [B.Formula V; n + 1 + 1]) :
      ‚ãÄ œÜs = (‚ãÄ Fin.init œÜs) ‚ãè (œÜs (Fin.last (n + 1))) := by rfl
    rw [bigand_succ œÜs]
    simp only [Model.value_and, bigand_value (Fin.init œÜs) w, Fin.init, Fin.forall_fin_succ',
      Bool.and_eq_true]

theorem bigor_value (œÜs : [B.Formula V; n + 1]) (w : Model V) :
    w.value (‚ãÅ œÜs) = true ‚Üî ‚àÉ i, w.value (œÜs i) = true := by
  match n with
  | 0 => simp only [BigVee.bigvee, foldop, (@Fin.exists_fin_one fun i => w.value (œÜs i)).symm]
  | n + 1 =>
    have bigor_succ {n : ‚Ñï} (œÜs : [B.Formula V; n + 1 + 1]) :
      ‚ãÅ œÜs = (‚ãÅ Fin.init œÜs) ‚ãé (œÜs (Fin.last (n + 1))) := by rfl
    rw [bigor_succ œÜs]
    simp only [Model.value_or, bigor_value (Fin.init œÜs) w, Fin.init, Fin.exists_fin_succ',
      Bool.or_eq_true]

section DNF

def dnf_entry (b : [Bool; n + 1]) : ùìï (n + 1) :=
  (‚ãÄ fun i => if b i then .var i else ~(.var i))

/-- Disjunctive normal form. The DNF of a boolean function `f : ùîπ n` is defined only for `n > 0`. -/
def dnf (f : ùîπ (n + 1)) : ùìï (n + 1) :=
  let rec dnf' (inputs : List [Bool; n + 1]) :=
    match inputs with
    | [] => ‚ä•
    | b::bs => (dnf_entry b) ‚ãé (dnf' bs)

  dnf' (satisfying_inputs f)

theorem model_value_bot {w : Model _} : w.value (‚ä• : ùìï (n + 1)) = false := by
  simp only [Model.value, Interpretation.fns, Bool.and_not_self]

theorem model_value_cnf_entry (w : Model _) (b : [Bool; n + 1]) (i : Fin (n + 1)) :
    w.value (if b i = true then (.var i : ùìï (n + 1)) else ~(.var i)) = true ‚Üî w.valuation i = b i
    := by
  by_cases h : b i = true
  ¬∑ simp only [h, if_pos h, Model.value]
  ¬∑ simp only [h, if_neg h, Model.value, Interpretation.fns, Bool.not_eq_true']

theorem model_value_dnf_entry_eq_true_iff_eq (w : Model _) (b : [Bool; n + 1]) :
    w.value (dnf_entry b) = true ‚Üî w.valuation = b := by
  simp only [dnf_entry, bigand_value, model_value_cnf_entry]
  exact ‚ü®funext, congrFun‚ü©

theorem model_value_dnf_eq_true_iff_mem (w : Model _) (bs : List [Bool; n + 1]) :
    w.value (dnf.dnf' bs) = true ‚Üî w.valuation ‚àà bs := by
  match bs with
  | [] => simp only [List.not_mem_nil, iff_false, Bool.not_eq_true, dnf.dnf', model_value_bot]
  | b::bs =>
    simp only [dnf.dnf', Model.value_or, Bool.or_eq_true, List.mem_cons]

    refine' ‚ü®
      fun h => h.elim
        (fun hw => Or.inl ((model_value_dnf_entry_eq_true_iff_eq w b).mp hw))
        (fun hw => Or.inr ((model_value_dnf_eq_true_iff_mem w bs).mp hw)),
      fun h => h.elim
        (fun hw => Or.inl ((model_value_dnf_entry_eq_true_iff_eq w b).mpr hw))
        (fun hw => Or.inr ((model_value_dnf_eq_true_iff_mem w bs).mpr hw))
      ‚ü©

theorem model_value_dnf_entry_self_eq_true {w : Model (Fin (n + 1))} :
    w.value (dnf_entry w.valuation) = true :=
  (model_value_dnf_entry_eq_true_iff_eq w w.valuation).mpr rfl

/-- Theorem 2.1a: Every boolean function of at least one variable is represented by its DNF. -/
theorem dnf_represents (f : ùîπ (n + 1)) : (dnf f).represents f := by
  intro w

  match h : satisfying_inputs f with
  | [] => simp only [h, dnf, dnf.dnf', model_value_bot, (satisfying_inputs_empty_iff f).mp h]
  | b::bs =>
    simp only [h, dnf, dnf.dnf', Model.value_or]

    by_cases hw : w.valuation ‚àà satisfying_inputs f
    ¬∑ rw [(mem_satisfying_inputs_iff f).mp hw]
      apply Or.elim (List.mem_cons.mp (h ‚ñ∏ hw))
      ¬∑ intro hwb; simp_rw [‚Üê hwb, model_value_dnf_entry_self_eq_true, Bool.true_or]
      ¬∑ intro hwbs; simp_rw [(model_value_dnf_eq_true_iff_mem w bs).mpr hwbs, Bool.or_true]

    ¬∑ rw [(not_mem_satisfying_inputs_iff f).mp hw, Bool.or_eq_false_iff]
      rw [h, List.mem_cons.not, not_or] at hw
      have left := (model_value_dnf_entry_eq_true_iff_eq w b).not.mpr hw.left
      have right := (model_value_dnf_eq_true_iff_mem w bs).not.mpr hw.right
      rw [Bool.not_eq_true] at left right

      exact ‚ü®left, right‚ü©

end DNF

section CNF

def cnf_entry (b : [Bool; n + 1]) : ùìï (n + 1) :=
  (‚ãÅ fun i => if b i then ~.var i else .var i)

/-- Conjunctive normal form. The CNF of a boolean function `f : ùîπ n` is defined only for `n > 0`. -/
def cnf (f : ùîπ (n + 1)) : ùìï (n + 1) :=
  let rec cnf' (inputs : List [Bool; n + 1]) :=
    match inputs with
    | [] => ‚ä§
    | b::bs => (cnf_entry b) ‚ãè (cnf' bs)

  cnf' (satisfying_inputs (~f))

theorem tilde_bot {n : ‚Ñï} : ~(‚ä• : ùìï (n + 1)) ‚â° ‚ä§ := by
    intro w
    simp only [Model.value, Interpretation.fns, Bool.not_and, Bool.not_not, Bool.or_comm]

theorem not_bigwedge (bs : [Bool; n + 1]) : (!‚ãÄ bs) = ‚ãÅ (fun i => !(bs i)) := by
  match n with
  | 0 => rfl
  | n + 1 => simp_rw [BigWedge.apply, Wedge.wedge, Bool.not_and, not_bigwedge (Fin.init bs),
    BigVee.apply, Vee.vee, Fin.init, Fin.init_def]

theorem cnf_entry_eq_not_dnf_entry {n : ‚Ñï} (w : Model _) (b : [Bool; n + 1]) :
    w.value (cnf_entry b) = !(w.value (dnf_entry b)) := by
  simp only [cnf_entry, dnf_entry, Model.value_not, Model.value_bigwedge, Model.value_bigvee,
    Model.value_ite, not_bigwedge, Bool.not_ite, Bool.not_not]

theorem cnf'_semeq_not_dnf' {n : ‚Ñï} (bs : List [Bool; n + 1]) : cnf.cnf' bs ‚â° ~(dnf.dnf' bs) := by
  intro w
  match bs with
  | [] => simp only [cnf.cnf', dnf.dnf', tilde_bot w]
  | b::bs =>
    simp only [cnf.cnf', dnf.dnf', Model.value_and, Model.value_or, Model.value_not, Bool.not_or,
      cnf_entry_eq_not_dnf_entry, cnf'_semeq_not_dnf' bs w]

theorem cnf_semeq_not_dnf_not (f : ùîπ (n + 1)) : cnf f ‚â° ~(dnf (~f)) := by
  intro w

  match h : satisfying_inputs (~f) with
  | [] => simp only [h, cnf, cnf.cnf', dnf, dnf.dnf', tilde_bot _]
  | b::bs =>
    simp_rw [cnf, dnf, h, cnf.cnf', dnf.dnf', Model.value_and, Model.value_not, Model.value_or,
      Bool.not_or, ‚Üê cnf_entry_eq_not_dnf_entry w, ‚Üê Model.value_not, ‚Üê cnf'_semeq_not_dnf' bs _]

theorem represents_tilde {Œ± : ùìï n} (h : Œ±.represents f) : (~Œ±).represents (~f) := by
  intro w
  simp_rw [Model.value_not, h w, Tilde.tilde, Function.comp]

/-- Theorem 2.1b: Every boolean function of at least one variable is represented by its CNF. -/
theorem cnf_represents (f : ùîπ (n + 1)) : (cnf f).represents f := by
  have tilde_tilde (f : ùîπ (n + 1)) : ~~f = f := by
    simp only [Tilde.tilde, Function.comp_def, Bool.not_not]

  intro w
  simp only [cnf_semeq_not_dnf_not f w,  tilde_tilde f ‚ñ∏ represents_tilde (dnf_represents (~f)) w]

end CNF

/-- Corollary 2.2: Each formula of finite variables `œÜ` is equivalent to a DNF and a CNF. -/
theorem exists_dnf_cnf (œÜ : ùìï (n + 1)) : ‚àÉ (f : ùîπ (n + 1)), œÜ ‚â° dnf f ‚àß œÜ ‚â° cnf f
    := by
  refine' ‚ü®œÜ.function, _, _‚ü©
  ¬∑ intro w; rw [œÜ.represents_function, dnf_represents]
  ¬∑ intro w; rw [œÜ.represents_function, cnf_represents]

end NormalForm


section FunctionalCompleteness

/--
  A signature is _functional complete_ if every boolean function (of at least one variable) has a
  reprentation.

  In keeping with the text, boolean functions of zero variables must be ignored. The signature
  `{¬¨, ‚àß, ‚à®}` cannot represent a boolean function of zero variables because formulas of zero
  variables do not exist, as there are no _prime_ formulas.
-/
def Signature.functional_complete (S : Signature) [Interpretation S] :=
  ‚àÄ {n}, ‚àÄ f : ùîπ (n + 1), ‚àÉ œÜ : S.Formula (Fin (n + 1)), œÜ.represents f

/-- `{¬¨, ‚àß, ‚à®}` is functional complete. -/
theorem B.functional_complete : B.functional_complete := by
  intro n f
  exact ‚ü®dnf f, dnf_represents _‚ü©

/-
  This section contains the two signatures `{¬¨, ‚à®}` and `{¬¨, ‚àß}` along with proofs of their
  functional completeness.
-/
section SmallerSignatures

inductive B.And | and
inductive B.Or | or

/-- The boolean signature `{¬¨, ‚àß}`. -/
def B‚Çê : Signature := ‚ü®fun | 1 => B.Unary | 2 => B.And | _ => Empty‚ü©

instance : Tilde (B‚Çê.Formula V) := ‚ü®fun Œ± => .app 1 .not ![Œ±]‚ü©
instance : Wedge (B‚Çê.Formula V) := ‚ü®fun Œ± Œ≤ => .app 2 .and ![Œ±, Œ≤]‚ü©
instance [I : Inhabited V] : Bot (B‚Çê.Formula V) := ‚ü®.var I.default ‚ãè ~.var I.default‚ü©
instance [Inhabited V] : Top (B‚Çê.Formula V) := ‚ü®~‚ä•‚ü©

/-- The common interpretation of `{¬¨, ‚àß}`. -/
instance : Interpretation B‚Çê where
  fns := fun {n} => match n with
    | 1 => fun .not => fun b => Bool.not (b 0)
    | 2 => fun .and => fun b => Bool.and (b 0) (b 1)
    | 0 | _+3 => fun _ => by contradiction

def B‚Çê.of_B (Œ± : B.Formula V) : B‚Çê.Formula V :=
  match Œ± with
  | .var v => .var v
  | .app 1 .not œÜs => ~ (B‚Çê.of_B (œÜs 0))
  | .app 2 .and œÜs => B‚Çê.of_B (œÜs 0) ‚ãè B‚Çê.of_B (œÜs 1)
  | .app 2 .or œÜs => ~ (~ B‚Çê.of_B (œÜs 0) ‚ãè ~ B‚Çê.of_B (œÜs 1))

def B‚Çê.of_B_represents (Œ± : B.Formula V) : (B‚Çê.of_B Œ±) ‚â°' Œ± := by
  intro w
  match Œ± with
  | .var v => rfl
  | .app 1 .not œÜs =>
    simp only [of_B, Model.value, Interpretation.fns, Matrix.cons_val_fin_one,
      B‚Çê.of_B_represents (œÜs 0) w]
  | .app 2 .and œÜs =>
    simp only [of_B, Model.value, Interpretation.fns, Matrix.cons_val_zero, Matrix.cons_val_one,
      Matrix.head_cons, B‚Çê.of_B_represents (œÜs 0) w, B‚Çê.of_B_represents (œÜs 1) w]
  | .app 2 .or œÜs =>
    simp only [of_B, Model.value, Interpretation.fns, Matrix.cons_val_zero, Matrix.cons_val_one,
      Matrix.head_cons, B‚Çê.of_B_represents (œÜs 0) w, B‚Çê.of_B_represents (œÜs 1) w, Bool.not_and,
      Bool.not_not]

theorem B‚Çê.functional_complete : B‚Çê.functional_complete := by
  intro n f
  refine' ‚ü®B‚Çê.of_B (dnf f), _‚ü©
  intro w
  rw [of_B_represents _ w, dnf_represents]


/-- The boolean signature `{¬¨, ‚à®}`. -/
def B‚Çí : Signature := ‚ü®fun | 1 => B.Unary | 2 => B.Or | _ => Empty‚ü©

instance : Tilde (B‚Çí.Formula V) := ‚ü®fun Œ± => .app 1 .not ![Œ±]‚ü©
instance : Vee (B‚Çí.Formula V) := ‚ü®fun Œ± Œ≤ => .app 2 .or ![Œ±, Œ≤]‚ü©
instance [I : Inhabited V] : Top (B‚Çí.Formula V) := ‚ü®.var I.default ‚ãé ~.var I.default‚ü©
instance [Inhabited V] : Bot (B‚Çí.Formula V) := ‚ü®~‚ä§‚ü©

/-- The common interpretation of `{¬¨, ‚à®}`. -/
instance : Interpretation B‚Çí where
  fns := fun {n} => match n with
    | 1 => fun .not => fun b => Bool.not (b 0)
    | 2 => fun .or  => fun b => Bool.or  (b 0) (b 1)
    | 0 | _+3 => fun _ => by contradiction

def B‚Çí.of_B (Œ± : B.Formula V) : B‚Çí.Formula V :=
  match Œ± with
  | .var v => .var v
  | .app 1 .not œÜs => ~ (B‚Çí.of_B (œÜs 0))
  | .app 2 .or œÜs => B‚Çí.of_B (œÜs 0) ‚ãé B‚Çí.of_B (œÜs 1)
  | .app 2 .and œÜs => ~ (~ B‚Çí.of_B (œÜs 0) ‚ãé ~ B‚Çí.of_B (œÜs 1))

def B‚Çí.of_B_represents (Œ± : B.Formula V) : (B‚Çí.of_B Œ±) ‚â°' Œ± := by
  intro w
  match Œ± with
  | .var v => rfl
  | .app 1 .not œÜs =>
    simp only [of_B, Model.value, Interpretation.fns, Matrix.cons_val_fin_one,
      B‚Çí.of_B_represents (œÜs 0) w]
  | .app 2 .or œÜs =>
    simp only [of_B, Model.value, Interpretation.fns, Matrix.cons_val_zero, Matrix.cons_val_one,
      Matrix.head_cons, B‚Çí.of_B_represents (œÜs 0) w, B‚Çí.of_B_represents (œÜs 1) w]
  | .app 2 .and œÜs =>
    simp only [of_B, Model.value, Interpretation.fns, Matrix.cons_val_zero, Matrix.cons_val_one,
      Matrix.head_cons, B‚Çí.of_B_represents (œÜs 0) w, B‚Çí.of_B_represents (œÜs 1) w, Bool.not_or,
      Bool.not_not]

theorem B‚Çí.functional_complete : B‚Çí.functional_complete := by
  intro n f
  refine' ‚ü®B‚Çí.of_B (dnf f), _‚ü©
  intro w
  rw [of_B_represents _ w, dnf_represents]

end SmallerSignatures

end FunctionalCompleteness
